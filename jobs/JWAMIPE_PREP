#!/bin/bash
set -xa
date -u

#############################
# What used to be in prep.sh
#############################

##############################################
# Run setpdy and initialize PDY variables
##############################################
export cycle="t${cyc}z"
setpdy.sh
. ./PDY


##############################################
# Set com directory
##############################################
export CDATE=${CDATE:-${PDY}${cyc}}
export CDUMP=${CDUMP:-${RUN:-"wfs"}}
if [ $RUN_ENVIR = "nco" ]; then
    export ROTDIR=${COMROOT:?}/$NET/$envir
    export RSTDIR=${GESROOT:?}/$envir
fi


#############################
# Source relevant config files
#############################
configs="base prep prepbufr"
export EXPDIR=${EXPDIR:-$HOMEwamipe/parm/config}
config_path=${EXPDIR:-$NWROOT/wamipe.${wamipe_ver}/parm/config}
for config in $configs; do
    . $config_path/config.$config
    export err=$? ; err_chk "Error sourcing config files in $config_path"
done


#####################################
# Source machine runtime environment
#####################################
. $BASE_ENV/${machine}.env prep
export err=$? ; err_chk "Error sourcing env/${machine}.env"

######################################
# Set script and dependency variables
######################################
export OPREFIX="${CDUMP}.t${cyc}z."
export COMOUT="$ROTDIR/$CDUMP.$PDY/$cyc"
[[ ! -d $COMOUT ]] && mkdir -p $COMOUT

############################
# Copy dump files to rotdir
############################
if [ $RUN_ENVIR = "nco" ] ; then
    atmos="/atmos"
fi
$HOMEwamipe/ush/getdump.sh $CDATE $PDUMP $DMPDIR/${PDUMP}${DUMP_SUFFIX}.${PDY}/${cyc}${atmos} $COMOUT
export err=$? ; err_chk "Error getting dump files out of $DMPDIR/${PDUMP}${DUMP_SUFFIX}.${PDY}/${cyc}"

#   Ensure previous cycle gdas dumps are available (used by cycle & downstream)
GDATE=$($NDATE -$assim_freq $CDATE)
gPDY=$(echo $GDATE | cut -c1-8)
gcyc=$(echo $GDATE | cut -c9-10)
GDUMP=wdas
PDUMP=gdas
gCOMOUT="$ROTDIR/$GDUMP.$gPDY/$gcyc"
if [ ! -s $gCOMOUT/$GDUMP.t${gcyc}z.updated.status.tm00.bufr_d ]; then
  $HOMEwamipe/ush/getdump.sh $GDATE gdas $DMPDIR/${PDUMP}${DUMP_SUFFIX}.${gPDY}/${gcyc}${atmos} $gCOMOUT
  export err=$? ; err_chk "Error getting dump files out of $DMPDIR/${PDUMP}${DUMP_SUFFIX}.${gPDY}/${gcyc}"
fi

###########################
# If NODA, we can exit now
###########################
[ $NODA = "YES" ] && exit 0

######################################################
# Generate prepbufr files from dumps or copy from OPS
######################################################

rm $COMOUT/${OPREFIX}prepbufr
rm $COMOUT/${OPREFIX}prepbufr.acft_profiles
rm $COMOUT/${OPREFIX}nsstbufr

export job="j${CDUMP}_prep_${cyc}"
export DATAROOT=${DATAROOT:-"$RUNDIR/$CDATE/$CDUMP/prepbufr"}
if [ $ROTDIR_DUMP = "NO" ]; then
  COMIN_OBS=${COMIN_OBS:-$DMPDIR/${CDUMP}${DUMP_SUFFIX}.${PDY}/${cyc}}
  export COMSP=${COMSP:-$COMIN_OBS/$CDUMP.t${cyc}z.}
fi
export COMIN=${COMIN:-$ROTDIR/$CDUMP.$PDY/$cyc}
export COMINwdas=${COMINwdas:-$ROTDIR/wdas.$PDY/$cyc}
export COMINwfs=${COMINwfs:-$ROTDIR/wfs.$PDY/$cyc}

###################################################################
# Set DEBUG LEVEL - modifies info in execution trace prompt string
###################################################################
export DEBUG_LEVEL=${DEBUG_LEVEL=1}
case $DEBUG_LEVEL in
  1) export PS4='+ ${SECONDS}s + ' ;;       # add seconds (this is typical case)
  0) export PS4='+ ';;                      # don't include seconds (useful if
                                            #  want to diff output from 2 runs)
  2) export PS4='+ ${SECONDS}s:L$LINENO + ';;         # add script line #
  3) export PS4='+ ${SECONDS}s:${0##*/}:L$LINENO + ';;# add script name & line #
  4) export PS4='+ ${0##*/}:L$LINENO + ';;  # script name & line (no seconds)
  *) echo "Unrecognized DEBUG_LEVEL.  Stay with current PS4 setting";;
esac

########################################
# Check that required variables are set
########################################
set +x
echo
echo cyc is ${cyc:?"###FATAL ERROR \"cyc\" is not set"}
echo envir is ${envir:?"###FATAL ERROR \"envir\" is not set"}
echo job is ${job:?"###FATAL ERROR \"job\" is not set"}
echo DATAROOT is ${DATAROOT:?"###FATAL ERROR \"DATAROOT\" is not set"}
echo
set -x

# Force prepobs_makeprepbufr.sh to use prepobs_errtable.global from
# gfs.v*/fix/fix_gsi instead of from obsproc_global.v*/fix
# -----> Ask NCO if they want this in driver script?
VERSION_FILE_gfs=$NWROOT/versions/gfs.ver
[ -f $VERSION_FILE_gfs ] && . $VERSION_FILE_gfs

################################
# Print out version information
################################
set +x
echo
echo "####################################################################"
echo
echo "Current OBSPROC_GLOBAL version is ${obsproc_global_ver:-not set}"
echo "OBSPROC_PREP version used by this job is ${obsproc_prep_ver:-not set}"
echo "GFS version used by this job is ${gfs_ver:-not set}"
echo
echo "####################################################################"
echo
set -x

#####################################################################
# List modules loaded for this job
#   On luna/surge may need to initialize the Modules package to find
#   the module command.  Will do so for either system.
#####################################################################
if [ -f /opt/modules/default/init/sh ]; then  # on luna/surge
  . /opt/modules/default/init/sh 2>/dev/null
elif [ -f /usrx/local/Modules/default/init/sh ]; then  # on tide/gyre
  . /usrx/local/Modules/default/init/sh 2>/dev/null
elif [ -f /usrx/local/prod/modules/default/init/sh ]; then # on venus/mars
  . /usrx/local/prod/modules/default/init/sh 2>/dev/null
fi
set +x
echo
echo "####################################################################"
echo
      module list
echo
echo "####################################################################"
echo
set -x

######################
# Specify NET and RUN
######################
export NET=${NET:-gfs}
echo $job | grep gfs
err_gfs=$?
echo $job | grep gdas
err_gdas=$?
if [ $err_gfs = 0 ]; then
  export RUN=${RUN:-gfs}   # GFS
elif [ $err_gdas = 0 ]; then
  export RUN=${RUN:-gdas}  # GDAS
fi
set +x
echo
echo NET is ${NET:?"###FATAL ERROR \"NET\" is not set"}
echo RUN is ${RUN:?"###FATAL ERROR \"RUN\" is not set"}
echo
set -x

##############################
# Specify cycle and time-mark
##############################
export cycle=t${cyc}z
export tmmark=tm00

###############################
# Create new working directory
###############################
jobid=${jobid:-${job}.$(hostname -s).$$}
export DATA=${DATA:-$DATAROOT/${jobid}}
rm -rf $DATA
mkdir -p $DATA
cd $DATA
export pgmout=OUTPUT.$$

######################################
# Set job log file for postmsg output
######################################
jlogfile=${jlogfile:-${DATA}/jlogfile}

#################################################
# SENDCOM      - Copy files to $COMOUT directory
# SENDECF      - Flag Events on ECFLOW
# SENDDBN      - Alert output file to TOC
#################################################
export SENDCOM=${SENDCOM:-YES}
export SENDECF=${SENDECF:-YES}
export SENDDBN=${SENDDBN:-YES}

##########################
# Specify Execution Areas
##########################

# -------------------------------
# Paths for obsproc_network items
# -------------------------------
export HOMEobsproc_network=${HOMEobsproc_network:\
-${NWROOT:?}/obsproc_global.${obsproc_global_ver:?\
"###FATAL ERROR \"obsproc_global_ver\" is not set"}}

export SCRIPTSobsproc_global=${SCRIPTSobsproc_global:\
-$HOMEobsproc_network/scripts}

export FIXobsproc_global=${FIXobsproc_global:-$HOMEobsproc_network/fix}

# ----------------------------
# Paths for obsproc_prep items
# ----------------------------
export HOMEobsproc_prep=${HOMEobsproc_prep:\
-${NWROOT:?}/obsproc_prep.${obsproc_prep_ver:?\
"###FATAL ERROR \"obsproc_prep_ver\" is not set"}}

export USHobsproc_prep=${USHobsproc_prep:-$HOMEobsproc_prep/ush}

# directory path to data prep script executed in model script
# -----------------------------------------------------------
export ushscript_prep=${ushscript_prep:-$USHobsproc_prep}

# ---------------------------------------------------------
# Paths for combined obsproc_network and obsproc_prep items
# ---------------------------------------------------------

# directory paths to overall PREP processing executed in
#  prepobs_makeprepbufr.sh and its various child scripts
#  (other than prepobs_syndata.sh, see below)
# ------------------------------------------------------
export EXECPREP=${EXECPREP:-${HOMEobsproc_prep}/exec}
export FIXPREP=${FIXPREP:-${HOMEobsproc_prep}/fix}
export PARMPREP=${PARMPREP:-${HOMEobsproc_network}/parm}

# directory paths to SYNDATA processing executed in prepobs_syndata.sh
# --------------------------------------------------------------------
export EXECSYND=${EXECSYND:-${HOMEobsproc_prep}/exec}
export FIXSYND=${FIXSYND:-${HOMEobsproc_prep}/fix}
export PARMSYND=${PARMSYND:-${HOMEobsproc_network}/parm}

# ---------------------------
# Paths for non-obsproc items
# ---------------------------

# DICTPREP is directory path to metar.tbl dictionary used in
#  prepobs_prepacqc.sh if PREPOBS_PREPACPF is executed
# ----------------------------------------------------------
export DICTPREP=${DICTPREP:-${NWROOT}/decoders/decod_shared/dictionaries_${dictionaries_ver}}

# HOMEgfs is directory path to prepobs_errtable.global (PRVT), used in
# prepobs_makeprepbufr.sh and its child scripts prepobs_syndata.sh and
# prepobsp_prevents.sh.
# ---------------------------------------------------------------------------
export HOMEgfs=${HOMEwamipe:-${NWROOT:?}/gfs.${gfs_ver:?"###FATAL ERROR \"gfs_ver\" is not set"}}

#########################################################################
# Add some prod utilities to working directory
#########################################################################
echo "step ############# break ##############################" > ./break
cp $UTILROOT/ush/err_chk   .; chmod +x err_chk
cp $UTILROOT/ush/err_exit  .; chmod +x err_exit
cp $UTILROOT/ush/prep_step .; chmod +x prep_step
cp $UTILROOT/ush/postmsg   .; chmod +x postmsg
cp $UTILROOT/ush/setpdy.sh .; chmod +x setpdy.sh

##########################################
# Run setpdy and initialize PDY variables
##########################################
./setpdy.sh
. PDY

#########################
# Define COM directories
#########################
export COMIN_ROOT=${COMIN_ROOT:-${COMROOT:-""}}
export COMPONENT=${COMPONENT:-atmos}

export NEMSIO_IN=${NEMSIO_IN:-.false.}        # switch for nemsio vs sigio guess
export NETCDF_IN=${NETCDF_IN:-.false.}         # switch for netcdf history guess
                                              # NOTE: only NEMSIO_IN or NETCDF_IN can be .true.
export envir_getges=${envir_getges:-$envir}
export GETGES_COM=${GETGES_COM:-$COMROOT}     # Root location for GFS/GDAS COM data
export GETGES_NWG=${GETGES_NWG:-$GESROOT}
export COMINgdas=${COMINgdas:-$(compath.py gfs/${envir_getges})/gdas.$PDY/${cyc}/${COMPONENT}}
export COMINgfs=${COMINgfs:-$(compath.py gfs/${envir_getges})/gfs.$PDY/${cyc}/${COMPONENT}}

###################################################
# SETUP GDAS AND GFS PREPBUFR PROCESSING VARIABLES
###################################################

#########################################################
# Specify variables specific to this execution of script
#########################################################

#  Set POE *or* BACK to YES in order to run this job in a parallel environment

export POE=${POE:-YES}
##export BACK=YES  # set BACK to YES for an alternate method of running this
                   #  job in a parallel environment (in this case POE must be
                   #  NO)

#  NSPLIT indicates the number of parts into which the PREPDATA
#         processing will will be split in order to run in parallel
#         for computational efficiency (either under poe tasks when
#         POE=YES or in background threads when BACK=YES)
#   (Applies only when either POE=YES or BACK=YES, and PREPDATA=YES)
#   Consider the size of the backgrounds fields if using threads. 

export NSPLIT=${NSPLIT:-4}

#  BUFRLIST indicates the list of BUFR data dump file names to process

export BUFRLIST=${BUFRLIST:-"adpupa proflr aircar aircft satwnd adpsfc \
 sfcshp vadwnd wdsatr ascatw rassda gpsipw"}

export errPREPDATA_limit=4 # allow program PREPOBS_PREPDATA to continue at all
                           # center hour (cycle) times if foreground exit
                           # status is 4 (i.e., when either either "ADPUPA" or
                           # "ADPSFC" dump is empty)

# VARIABLES THAT CONTROL PROCESSING OF INDIVIDUAL PROGRAMS
# --------------------------------------------------------

#  -- These can individually be switched to NO without affecting the
#      success of other programs and the success of the complete job
#      (all should normally be set to YES unless otherwise specified;
#       if job fails in one of these programs, set offending program
#       to NO and resubmit to "work-around" problem)

export SYNDATA=${SYNDATA:-YES}   # Execute program SYNDAT_SYNDATA   if YES

export PREPACQC=${PREPACQC:-YES} # Execute PREPACQC script processing if YES
   export PROCESS_ACQC=${PROCESS_ACQC:-YES} # Execute program PREPOBS_PREPACQC
                                            #  if YES
   export PROCESS_ACPF=${PROCESS_ACPF:-NO}  # Execute program PREPOBS_PREPACPF
                                            #  if YES

export PROFCQC=${PROFCQC:-YES}   # Execute program PREPOBS_PROFCQC  if YES

export CQCVAD=${CQCVAD:-YES}     # Execute program PREPOBS_CQCVAD   if YES

export CQCBUFR=${CQCBUFR:-YES}   # Execute program PREPOBS_CQCBUFR  if YES

export OIQCBUFR=${OIQCBUFR:-NO} # Execute program PREPOBS_OIQCBUFR if YES


#  -- If any of these are switched to NO it will affect the success of
#      other programs and the success of the complete job
#      (these are set-up only for CHECKOUT runs - they should always
#       be set to YES for operational runs)

export PREPDATA=${PREPDATA:-YES}  
                      # Execute programs PREPOBS_MPCOPYBUFR, PREPOBS_PREPDATA,
                      # PREPOBS_LISTHEADERS and PREPOBS_MONOPREPBUFR if YES

export GETGUESS=${GETGUESS:-YES}
                      # Encode first guess (background) values interpolated to
                      # observation locations in the PREPBUFR file for use by
                      # the q.c. programs.  This guess is always from a global
                      # sigmai (legacy) or nemsio or netcdf history guess file 
                      # valid at the center PREPBUFR processing date/time.

export DO_QC=${DO_QC:-YES}
                      # IF NO, programs PREPOBS_PREPACQC, PREPOBS_PREPACPF,
                      # PREPOBS_PROFCQC, PREPOBS_CQCVAD, PREPOBS_CQCBUFR and
                      # PREPOBS_OIQCBUFR will NEVER execute regardless of
                      # switches above -
                      # should be set to NO only as a last resort!!!

export PROCESS_UNBLKBUFR=${PROCESS_UNBLKBUFR:-NO}
                      # IF YES, create prepbufr.unblok

env

[ $RUN = gdas ] && export NET=gdas
#####################
# Execute the script
#####################
$SCRIPTSobsproc_global/exglobal_makeprepbufr.sh.ecf
eval err_${RUN}_makeprepbufr=$?
eval [[ \$err_${RUN}_makeprepbufr -ne 0 ]] && $DATA/err_exit

echo "$SITE `hostname`  --  `date -u`" > $COMOUT/where_${cycle}_${RUN}_prep_ran

> $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_global_ver" ]  &&  \
 echo "Current OBSPROC_GLOBAL version is $obsproc_global_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run
[ -n "$obsproc_prep_ver" ]  &&  \
 echo "OBSPROC_PREP version used by this job is $obsproc_prep_ver" >> \
 $COMOUT/obsproc_version_for_${cycle}_${RUN}_prep_run

if [ "$KEEPDATA" != YES ]; then
   cd $DATAROOT
   rm -rf $DATA
fi
date -u

exit 0
